## *Lectura de Datos*:

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import sqlite3 as sql
import plotly.graph_objects as go ## Para gráficos
import os

#os.getcwd()
#os.chdir('D:\Aplicaciones de la analítica\Proyecto marketing')

# Para ejecutar sql y conectarse a bd

conn = sql.connect('/content/drive/MyDrive/Analitica 3/Marketing/BD/db_movies') ## Crear cuando no existe el nombre cd y conectarse cuando si existe
cur=conn.cursor() # Para funciones que ejecutan sql en base de datos
cur.execute ("SELECT name FROM sqlite_master Where type = 'table';")
print(cur.fetchall())
##*Analisis Exploratorio*:

movies = pd.read_sql('SELECT * FROM movies', conn)
ratings = pd.read_sql('SELECT * FROM ratings', conn)

ratings

from datetime import datetime
ts = int("1584101485")

# Date only
print(datetime.utcfromtimestamp(ts).strftime('%Y-%m-%d'))
def datefromtimestamp(timestamp):
    date = datetime.utcfromtimestamp(timestamp).strftime('%m-%d-%Y')
    return date

ratings["timestamp"] = ratings["timestamp"].apply(lambda x: datefromtimestamp(x))
ratings["timestamp"] = pd.to_datetime(ratings["timestamp"])

#Se revisa si hay datos nulos en la columna de titulos
pd.read_sql('SELECT COUNT(*) as ValoresNull FROM movies WHERE title IS NULL;', conn)

#Se revisa si hay datos nulos en la columna de generos
pd.read_sql('SELECT COUNT(*) as ValNull FROM movies WHERE genres IS NULL;', conn)

#Se revisa si hay calificaciones nulas
pd.read_sql('SELECT COUNT(*) as RaNull FROM ratings WHERE rating IS NULL;', conn) 

#Se revisa si hay datos nulos en la columna 
pd.read_sql('SELECT COUNT(*) Ranull FROM ratings WHERE movieId IS NULL;', conn) 

#Cuántos registros tiene movies
pd.read_sql('SELECT COUNT(*) as registros FROM movies', conn)

#Cuántos registros tiene ratings
pd.read_sql('SELECT COUNT(*) as registros FROM ratings', conn)

##Genero más visto
genvistas = pd.read_sql("""SELECT genres,COUNT(ratings.movieId) as Vistas FROM movies
                            INNER JOIN ratings 
                            ON movies.movieId = ratings.movieId
                            GROUP BY ratings.movieId
                            ORDER BY vistas DESC
                            LIMIT 10;""", conn)
print(genvistas)

#### verificar cuantas calificaciones tiene cada pelicula
rating_movies=pd.read_sql(''' SELECT rating, COUNT(*) AS count
FROM ratings
GROUP BY rating  ''',conn )
rating_movies
#####Distribución de calificaciones de las películas:
###Para visualizar cómo se distribuyen las calificaciones de las películas en la base de datos "ratings", puedes utilizar la siguiente consulta:

# Conectar a la base de datos
import matplotlib.pyplot as plt
conn = sql.connect('/content/drive/MyDrive/Analitica 3/Marketing/BD/db_movies')

# Realizar la consulta
cursor = conn.cursor()
cursor.execute("SELECT rating, COUNT(*) AS count FROM ratings GROUP BY rating")
data = cursor.fetchall()

# Crear el gráfico de barras
x = [row[0] for row in data]
y = [row[1] for row in data]
plt.bar(x, y)
plt.xlabel('Calificación')
plt.ylabel('Número de calificaciones')
plt.title('Distribución de calificaciones de las películas')
plt.show()

conn = sql.connect('/content/drive/MyDrive/Analitica 3/Marketing/BD/db_movies')
cursor = conn.cursor()
cursor.execute("SELECT r.rating, r.timestamp FROM ratings r INNER JOIN movies m ON m.movieId = r.movieId WHERE m.genres LIKE '%Drama%'")
data = cursor.fetchall()

# Crear el gráfico de dispersión
x = [row[1] for row in data]
y = [row[0] for row in data]
plt.scatter(x, y, alpha=0.5)
plt.xlabel('Timestamp')
plt.ylabel('Calificación')
plt.title('Relación entre calificaciones y tiempo para películas de drama')
plt.show()

## *Serie de tiempo*

from datetime import datetime
ts = int("1584101485")

# Date only
print(datetime.utcfromtimestamp(ts).strftime('%Y-%m-%d'))
def datefromtimestamp(timestamp):
    date = datetime.utcfromtimestamp(timestamp).strftime('%m-%d-%Y')
    return date

movies = pd.read_sql('SELECT * FROM movies', conn)
ratings = pd.read_sql('SELECT * FROM ratings', conn)

ratings["timestamp"] = ratings["timestamp"].apply(lambda x: datefromtimestamp(x))
ratings["timestamp"] = pd.to_datetime(ratings["timestamp"])

## Serie de tiempo de los meses en que más se ven peliculas 
import plotly.express as px
ratings["timestamp"] = ratings["timestamp"].dt.month
retfecha= ratings.groupby(["timestamp"])[["userId"]].count().reset_index()
fig = px.line(retfecha, x='timestamp', y =['userId'], title = '<b>Vistas de películas mensuales<b>',
              color_discrete_sequence=px.colors.qualitative.G10)
fig.update_layout(
    template = 'simple_white',
    title_x = 0.5,
   legend_title = 'Usuarios',
    xaxis_title = '<b>Fecha<b>',
    yaxis_title = '<b>Cantidad de usuarios<b>',
)
fig.show()

## *Sistemas de recomendación basado en popularidad*

##Peliculas más vistas con su promedio de calificación 
Movievistas = pd.read_sql("""SELECT title,
                            avg(ratings.rating) as avg_rat,
                            COUNT(ratings.movieId) as vistas FROM movies
                            INNER JOIN ratings 
                            ON movies.movieId = ratings.movieId
                            GROUP BY ratings.movieId
                            ORDER BY vistas DESC
                            LIMIT 10;""", conn)
print(Movievistas)

## 10 Generos Más calificado
gencal = pd.read_sql("""SELECT genres,count(ratings.rating) as MasCalif FROM movies
                            INNER JOIN ratings 
                            ON movies.movieId = ratings.movieId
                            GROUP BY genres
                            ORDER BY MasCalif DESC
                            LIMIT 10;""", conn)
print(gencal)

##Genero con mejor calificacion
genecal = pd.read_sql("""SELECT genres,Avg(ratings.rating) as MejorCalif FROM movies
                            INNER JOIN ratings 
                            ON movies.movieId = ratings.movieId
                            GROUP BY genres
                            ORDER BY MejorCalif DESC
                            LIMIT 10;""", conn)
print(genecal)

## 10 peliculas mejor calificadas
topdiezmovie = pd.read_sql("""SELECT title,Avg(ratings.rating) as MejorCalif FROM movies
                            INNER JOIN ratings 
                            ON movies.movieId = ratings.movieId
                            GROUP BY genres
                            ORDER BY MejorCalif DESC
                            LIMIT 10;""", conn)
print(topdiezmovie)

## Serie de tiempo de las vistas de las peliculas
import plotly.express as px
ratings["timestamp"] = ratings["timestamp"].dt.year
retfecha= ratings.groupby(["timestamp"])[["userId"]].count().reset_index()
fig = px.line(retfecha, x='timestamp', y =['userId'], title = '<b>Vistas de peliculas a traves del tiempo<b>',
              color_discrete_sequence=px.colors.qualitative.G10)
fig.update_layout(
    template = 'simple_white',
    title_x = 0.5,
   legend_title = 'Usuarios',
    xaxis_title = '<b>Fecha<b>',
    yaxis_title = '<b>Cantidad de usuarios<b>',
)
fig.show()

##Usuarios si vieron más de una pelicula
vistasusuario = pd.read_sql("""SELECT userId, COUNT(DISTINCT movieID) as NumVistas FROM ratings
                            GROUP BY userId
                            ORDER BY NumVistas DESC
                            LIMIT 10;""", conn)
print(vistasusuario)

##Promedio de calificación por Usuario
vistasusuario = pd.read_sql("""SELECT userId, COUNT(DISTINCT movieId) as NumVistas, 
                            Avg(ratings.rating) as PromCalif FROM ratings
                            GROUP BY userId
                            HAVING NumVistas  
                            ORDER BY PromCalif DESC
                            LIMIT 10;""", conn)
print(vistasusuario)

##En que año se estrenaron las peliculas, y cuales fueron mejor calificadas 
estreno = pd.read_sql("""SELECT SUBSTR(title, -1, -4) as ano_estreno, SUBSTR(title, -7,-60) as titulo,
                          avg(ratings.rating) as avg_rat,
                          COUNT(ratings.movieId) as vistas FROM movies
                          INNER JOIN ratings 
                          ON movies.movieId = ratings.movieId
                          GROUP BY ano_estreno
                          HAVING vistas >= 50
                          ORDER BY avg_rat DESC
                          LIMIT 10;""", conn)
print(estreno)

##SISTEMA DE RECOMENDACIÓN DE CONTENIDO GENERAL##
#juntar tablas 
moviescompleta =pd.read_sql("""SELECT movies.movieId,title,
                            avg(ratings.rating) as avg_rat,
                            COUNT(ratings.movieId) as vistas,
                            movies.genres FROM movies
                            INNER JOIN ratings 
                            ON movies.movieId = ratings.movieId
                            GROUP BY ratings.movieId
                            ORDER BY vistas DESC
                            ;""", conn)
moviescompleta.head(10)

#verificar que no se dupliquen ###Pero se vuelve a cambiar la fecha####
moviescompleta.duplicated().sum()

moviescompleta.info()

import re
def clean_title(title):
    return re.sub("[\(\[].*?[\)\]]", "",title)

def genre(series):
    genres = series.index[6:-2]
    
    text = []
    for i in genres:
        if series[i] == 1:
            text.append(i)
            break
    return ", ".join(text)

moviescompleta["title"] = moviescompleta["title"].apply(clean_title)

moviescompleta["title"].unique()

#Separar los géneros en categorías 
from mlxtend.preprocessing import TransactionEncoder
genres_1=moviescompleta['genres'].str.split('|')
te =  TransactionEncoder()
genres_1 =te.fit_transform(genres_1)
genres_1 = pd.DataFrame(genres_1, columns = te.columns_)

#Juntar los generos a la tabla completa
moviescompleta_1=pd.concat([moviescompleta,genres_1], axis=1)
del moviescompleta_1['genres']
moviescompleta_1

## *Sistema de recomendación filtro colaborativo basado en la pelicula*

movie='Toy Story '
ind_movie=moviescompleta[moviescompleta['title']==movie].index.values.astype(int)[0] ##Indice del libro
correlaciones=genres_1.corrwith(genres_1.iloc[ind_movie,:],axis=1) ##Matriz de correlaciones
correlaciones.sort_values(ascending=False)

def recomendacion(movie = list(moviescompleta['title'].unique())):
     
    ind_movie=moviescompleta[moviescompleta['title']==movie].index.values.astype(int)[0]
    similar_movie = genres_1.corrwith(genres_1.iloc[ind_movie,:],axis=1)
    similar_movie = similar_movie.sort_values(ascending=False)
    top_similar_movie=similar_movie.to_frame(name="correlación").iloc[0:11,]
    top_similar_movie['title']=moviescompleta["title"]
    
    return top_similar_movie

from ipywidgets import interact ## para análisis interactivo

print(interact(recomendacion))
## *Sistema de recomendación basado en contenido KNN*:

from sklearn import neighbors
from ipywidgets import interact
model = neighbors.NearestNeighbors(n_neighbors=11, metric='cosine')
model.fit(genres_1)
dist, idlist = model.kneighbors(genres_1)

distancias=pd.DataFrame(dist)
id_list=pd.DataFrame(idlist)
movie_name='Toy Story '
def MovieRecommender(movie_name = list(moviescompleta['title'].value_counts().index)):
    movie_list_name = []
    movie_id = genres_1[moviescompleta['title'] == movie_name].index
    movie_id = movie_id[0]
    for newid in idlist[movie_id]:
        movie_list_name.append(moviescompleta.loc[newid].title)
    return movie_list_name

print(interact(MovieRecommender))

## *Sistema de recomendación filtro colaborativo basado en el usuario*:

ratings.to_sql("usuarios",conn)
conn=sql.connect('usuarios')
cur=conn.cursor()
ratings=pd.read_sql('select * from usuarios', conn)
watcher = Reader(rating_scale=(0, 10))
     

data   = Dataset.load_from_df(ratings[['userId','movieId','rating']], watcher)
     

models=[KNNBasic(),KNNWithMeans(),KNNWithZScore(),KNNBaseline()] 
results = {}
     

for model in models:
 
    CV_scores = cross_validate(model, data, measures=["MAE","RMSE"], cv=5, n_jobs=-1)  
    result = pd.DataFrame.from_dict(CV_scores).mean(axis=0).\
             rename({'test_mae':'MAE', 'test_rmse': 'RMSE'})
    results[str(model).split("algorithms.")[1].split("object ")[0]] = result


performance_df = pd.DataFrame.from_dict(results).T
performance_df.sort_values(by='RMSE')

param_grid = { 'sim_options' : {'name': ['msd','cosine','pearson', 'pearson_baseline'], 
                               'min_support': [1,3,5,7,9],         ### Vecinos minimos necesarios para realixar la predicción  ###Agregar mas agrupaciones
                                'user_based': [False, True]}  ### Basado en usuario (True) o en el items/calificaciones (False)
             }

gridsearchKNNBasic = GridSearchCV(KNNBasic, param_grid, measures=['mae'], \
                                      cv=2, n_jobs=2)
                                    
gridsearchKNNBasic.fit(data)

gridsearchKNNBasic.best_params["mae"]

gridsearchKNNBasic.best_score["mae"]

## *Sistema de recomendación por filtros y contenidos*

Creamos una función llamada show_recommendations() que se ejecuta cada vez que se selecciona un usuario en la lista desplegable. Esta función utiliza el ID del usuario seleccionado para obtener las 15 películas con la calificación más alta para ese usuario y las muestra en la pantalla.

Finalmente, asociamos la función show_recommendations() a la lista desplegable de usuarios utilizando el método observe() de ipywidgets.

import sqlite3
import ipywidgets as widgets
from IPython.display import display

# Conectar a la base de datos
conn = sql.connect('/content/drive/MyDrive/Analitica 3/Marketing/BD/db_movies')

# Obtener la lista de usuarios
cursor = conn.cursor()
cursor.execute("SELECT DISTINCT UserId FROM ratings")
users = sorted([str(row[0]) for row in cursor.fetchall()])

# Crear la lista desplegable de usuarios
user_dropdown = widgets.Dropdown(options=users, description='Usuario:')

# Crear el widget de texto para mostrar las recomendaciones
recommendations_text = widgets.HTML()

# Función para mostrar las recomendaciones para el usuario seleccionado
def show_recommendations(sender):
    # Obtener el ID del usuario seleccionado
    user_id = user_dropdown.value
    
    # Obtener las recomendaciones para el usuario
    cursor = conn.cursor()
    cursor.execute("SELECT title FROM movies WHERE movieId IN ({})".format(
        "SELECT movieId FROM ratings WHERE UserId = {} ORDER BY rating DESC LIMIT 15".format(user_id)))
    recommendations = [row[0] for row in cursor.fetchall()]

    # Crear una cadena HTML que contenga las recomendaciones
    html = "<ul>"
    for title in recommendations:
        html += "<li>{}</li>".format(title)
    html += "</ul>"
    
    # Actualizar el widget de texto con las recomendaciones
    recommendations_text.value = html

# Asociar la función show_recommendations a la lista desplegable de usuarios
user_dropdown.observe(show_recommendations, 'value')

# Mostrar la lista desplegable de usuarios y el widget de texto de recomendaciones
display(user_dropdown)
display(recommendations_text)

import sqlite3
import pandas as pd
import ipywidgets as widgets
from IPython.display import display

# Conectar a la base de datos
conn = sql.connect('/content/drive/MyDrive/Analitica 3/Marketing/BD/db_movies')

# Obtener la lista de películas
movies = pd.read_sql_query("SELECT * FROM movies", conn)
movie_dropdown = widgets.Dropdown(options=list(movies['title']), description='Película:')

# Crear la tabla para mostrar las películas similares
similar_movies_table = widgets.HTML()

# Función para mostrar las películas similares a la película seleccionada
def show_similar_movies(sender):
    # Obtener la película seleccionada
    movie_title = movie_dropdown.value
    
    # Obtener las películas similares
    def content_based_recommendation(movie_id, top_n=15):
    # Obtener los vectores de características de la película seleccionada
      query = '''
        SELECT features
        FROM movie_features
        WHERE movieId = ?
      '''
      cur.execute(query, (movie_id,))
      selected_features = cur.fetchone()[0]

    # Calcular la similitud entre la película seleccionada y todas las demás películas
      query = '''
        SELECT movieId, features
        FROM movie_features
    '''
      cur.execute(query)
      similarities = []
    for row in cur.fetchall():
        movie_id, features = row
        similarity = cosine_similarity(selected_features, features)
        similarities.append((movie_id, similarity))

    # Ordenar las películas por similitud y devolver las top_n más similares
    similarities.sort(key=lambda x: x[1], reverse=True)
    recommendations = similarities[1:top_n+1]
    return recommendations
    @app.route('/content-based-recommendation')
    def content_based():
    # Obtener una lista de todas las películas
      query = '''
        SELECT movieId, title
        FROM movies
        ORDER BY title ASC
      '''
      cur.execute(query)
      movies = cur.fetchall()

    # Mostrar una lista desplegable de todas las películas
      html = '''
        <form>
            <div class="form-group">
                <label for="movie-select">Selecciona una película:</label>
                <select class="form-control" id="movie-select" name="movie_id">
      '''
      for movie in movies:
        html += f'<option value="{movie[0]}">{movie[1]}</option>'
      html += '''
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Obtener recomendaciones</button>
        </form>
    '''

    # Si se ha enviado el formulario, obtener las recomendaciones y mostrarlas
    if 'movie_id' in request.args:
        movie_id = int(request.args['movie_id'])
        recommendations = content_based_recommendation(movie_id)
        html += '<h2>Recomendaciones:</h2>'
        for rec in recommendations:
            html += f'<p>{get_movie_title(rec[0])}</p>'

    return html
    print(similar_movies)


import sqlite3

# Conectar a la base de datos
conn = sql.connect('/content/drive/MyDrive/Analitica 3/Marketing/BD/db_movies')
c = conn.cursor()

# Seleccionar los géneros
c.execute("SELECT genres FROM movies")
genres = c.fetchall()

# Crear un conjunto de géneros únicos
unique_genres = set()
for g in genres:
    for genre in g[0].split('|'):
        unique_genres.add(genre)

# Convertir el conjunto de géneros únicos en una lista
unique_genres = list(unique_genres)

# Mostrar los géneros únicos
print("Lista de géneros disponibles:")
for i, genre in enumerate(unique_genres):
    print(f"{i+1}. {genre}")

# Seleccionar el género
genre_num = int(input("Seleccione el número correspondiente al género: "))
selected_genre = unique_genres[genre_num - 1]

# Mostrar las películas recomendadas
c.execute("""
    SELECT m.title, AVG(r.rating) AS avg_rating
    FROM movies m
    JOIN ratings r ON m.movieId = r.movieId
    WHERE m.genres LIKE ?
    GROUP BY m.movieId
    ORDER BY avg_rating DESC
    LIMIT 10
""", ('%'+selected_genre+'%',))

recommended_movies = c.fetchall()
print(f"\nLas 10 películas más recomendadas del género '{selected_genre}':")
for movie in recommended_movies:
    print(f"- {movie[0]} (rating promedio: {movie[1]:.2f})")
    

